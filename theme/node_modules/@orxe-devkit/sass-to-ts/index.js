#!/usr/bin/env node

const fs = require('file-system');
const fse = require('fs-extra');
const sass = require('node-sass');
const path = require('path');
const process = require('process');
const chokidar = require('chokidar');
const _hasArgumemt = process.argv.includes('-theme');

function generateFile(dir, scssFilePath, extension) {
	let path;
	if (_hasArgumemt) {
		const pos = scssFilePath.lastIndexOf('\\');
		if (pos > 0) {
			path = scssFilePath.substr(0, pos) + `\\${dir}` + scssFilePath.substr(pos);
			path = path.replace(/\\/g, '/');
			return `${path.split('.')[0]}${extension}`;
		}
		//Creates the dir in root
		path = scssFilePath.replace(/\\/g, '/');
		return `${dir}/${path.split('.')[0]}${extension}`;
	} else {
		path = scssFilePath.replace(/\\/g, '/');
		return `${path.split('.')[0]}-css.ts`;
	}
}

function fileConverter(sassFile, filetype) {
	if (!sassFile.includes('.ts')) {
		sass.render(
			{
				file: sassFile,
				sourceMap: true,
				includePaths: ['./node_modules/', './src/', './packages/'],
				outputStyle: 'compressed',
				importer: function importer(sassFile, prev, done) {
					if (sassFile[0] === '~') {
						sassFile = path.resolve('node_modules', sassFile.substr(1));
					}

					return { file: sassFile };
				},
			},
			function (err, result) {
				if (!err) {
					let file;
					let content;
					switch (filetype) {
						case 'ts':
							file = generateFile('ts', sassFile, '.ts');
							content = `import {css} from 'lit-element';\nexport default css\`${result.css
								.toString()
								.trim()
								.replace(':root', ':host')}\`;`;
							break;
						case 'js':
							file = generateFile('js', sassFile, '.js');
							content = `import {css} from 'lit-element';\nexport default css\`${result.css
								.toString()
								.trim()
								.replace(':root', ':host')}\`;`;
							break;
						case 'css':
							file = generateFile('css', sassFile, '.css');
							content = result.css;
							break;
					}
					fs.writeFile(file, content, function (err) {
						if (!err) {
							console.log('File successfully written on disk');
						} else {
							console.error('Something went wrong ', err);
						}
					});
				} else {
					console.error('Something went wrong ', err);
				}
			},
		);
	}
}

function watcher() {
	const watcher = chokidar.watch('./src/*.scss', {
		ignored: /(map|js)/,
		persistent: true,
	});
	watcher.on('change', (path) => {
		setTimeout(() => {
			fileConverter(path, 'ts');
		}, 100);
	});
}

async function buildTheme() {
	await fs.mkdir('dist');
	fse.copy('src', 'dist', async function (err) {
		if (err) {
			return console.log('An error occured while copying the folder.', err);
		}
		try {
			process.chdir('dist');
		} catch (err) {
			console.error('error occured while ' + 'changing directory: ' + err);
		}
		await fs.recurse('./', ['**/[a-zA-Z0-9-]+(?<!map).scss'], function (filepath) {
			fileConverter(filepath, 'css');
			fileConverter(filepath, 'ts');
			fileConverter(filepath, 'js');
		});
	});
}

(function scssrenderer() {
	if (_hasArgumemt) {
		buildTheme();
	} else {
		watcher();
		fs.recurse('./src', ['**/[a-zA-Z-]+(?<!map).scss'], function (filepath) {
			fileConverter(filepath, 'ts');
		});
	}
})();
