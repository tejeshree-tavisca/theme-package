
/**
this file is using scss functions
You might be seeing SCSS parameterers for the function
We are still using css variables
*/
@mixin text-inherit() {
  font-family: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  letter-spacing: inherit;
  text-decoration: inherit;
  text-overflow: inherit;
  text-transform: inherit;
  text-align: inherit;
  white-space: inherit;
  color: inherit;
}

// Font smoothing
// --------------------------------------------------

@mixin font-smoothing() {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

// Function for getting color value from Current theme
@function orxe-color($key) {
  $result: map-get($current-theme, map-get($orxe-color-map, $key));
  @return $result;
}

/*
Fork of https://github.com/waldemarfm/sass-svg-uri/blob/master/_svg-uri.scss
Modified for Cross-Browser (IE lol)
Extended to encode additional values
*/
@function encode-svg($svg) {
  $encoded: '';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg) / $slice);

  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    $chunk: str-replace($chunk, '"', "%22");
    $chunk: str-replace($chunk, '<', '%3C');
    $chunk: str-replace($chunk, '>', '%3E');
    $chunk: str-replace($chunk, '&', '%26');
    $chunk: str-replace($chunk, '#', '%23');
    $chunk: str-replace($chunk, ',', '%2C');
    $chunk: str-replace($chunk, '=', '%3D');
    $chunk: str-replace($chunk, " ", '%20');
    $chunk: str-replace($chunk, "/", '%2F');
    $chunk: str-replace($chunk, ":", '%3A');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml, #{$encoded}");
}

/* 
String replace function, used for encoding.
Source: http://sassmeister.com/gist/1b4f2da5527830088e4d
*/
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
      @return str-slice($string, 1, $index - 1) 
              + $replace 
              + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

/* Rem and Em conversion functions & mixins.
 * USE FOR:
 * Pass the px value to create CSS output with em or rem units
*/

@function calculate_rem($size) {
  $remSize: $size / $global-em-size;
  @return $remSize * 1rem;
}

@function calculate_em($size) {
  $emSize: $size / $global-em-size;
  @return $emSize * 1em;
}

@function calculate_px_height($rows, $line-height) {
	$height: ($rows * $line-height) * 1em;
	@return $height;
}

@mixin rem($property, $value) {
  #{$property}: ($value / $global-em-size) * 1rem; // calculate_rem($value);
}

@mixin rem-font-size($size) {
  font-size: ($size / $global-em-size) * 1rem; // calculate_rem($size);
}

@mixin px-height($rows, $line-height: $line-height-base) {
  max-height: ($rows * $line-height) * 1em; // calculate_px_height($rows, $line-height);
}

// Add property horizontal
// @param {string} $start
// @param {string} $end
// ----------------------------------------------------------
@mixin property-horizontal($prop, $start, $end: $start) {
  @if $start == 0 and $end == 0 {
    #{$prop}-left: $start;
    #{$prop}-right: $end;
  } @else {
    #{$prop}-left: $start;
    #{$prop}-right: $end;

    @at-root {
      @supports ((margin-inline-start: 0) or (-webkit-margin-start: 0)) {
        & {
          @if $start != null {
            #{$prop}-left: unset;
          }
          @if $end != null {
            #{$prop}-right: unset;
          }

          -webkit-#{$prop}-start: $start;
          #{$prop}-inline-start: $start;
          -webkit-#{$prop}-end: $end;
          #{$prop}-inline-end: $end;
        }
      }
    }
  }
}

// Add property for all directions
// @param {string} $prop
// @param {string} $top
// @param {string} $end
// @param {string} $bottom
// @param {string} $start
// @param {boolean} $content include content or use default
// ----------------------------------------------------------
@mixin property($prop, $top, $end: $top, $bottom: $top, $start: $end) {
  @include property-horizontal($prop, $start, $end);
  #{$prop}-top: $top;
  #{$prop}-bottom: $bottom;
}

// Add padding horizontal
// @param {string} $start
// @param {string} $end
// ----------------------------------------------------------
@mixin padding-horizontal($start, $end: $start) {
  @include property-horizontal(padding, $start, $end);
}

// Add padding for all directions
// @param {string} $top
// @param {string} $end
// @param {string} $bottom
// @param {string} $start
// ----------------------------------------------------------
@mixin padding($top, $end: $top, $bottom: $top, $start: $end) {
  @include property(padding, $top, $end, $bottom, $start);
}

// Add margin horizontal
// @param {string} $start
// @param {string} $end
// ----------------------------------------------------------
@mixin margin-horizontal($start, $end: $start) {
  @include property-horizontal(margin, $start, $end);
}

// Add margin for all directions
// @param {string} $top
// @param {string} $end
// @param {string} $bottom
// @param {string} $start
// ----------------------------------------------------------
@mixin margin($top, $end: $top, $bottom: $top, $start: $end) {
  @include property(margin, $top, $end, $bottom, $start);
}

// Add position horizontal
// @param {string} $start - amount to position start
// @param {string} $end - amount to left: 0; end
// ----------------------------------------------------------
@mixin position-horizontal($start: null, $end: null) {
  @if $start == $end {
    @include multi-dir() {
      left: $start;
      right: $end;
    }
  } @else {
    @include ltr() {
      left: $start;
      right: $end;
    }
    @include rtl() {
      left: unset;
      right: unset;

      left: $end;
      right: $start;
    }
  }
}

// Add position for all directions
// @param {string} $top
// @param {string} $end
// @param {string} $bottom
// @param {string} $start
// ----------------------------------------------------------
@mixin position($top: null, $end: null, $bottom: null, $start: null) {
  @include position-horizontal($start, $end);
  top: $top;
  bottom: $bottom;
}

// Text Direction - ltr / rtl
//
// CSS defaults to use the ltr css, and adds [dir=rtl] selectors
// to override ltr defaults.
// ----------------------------------------------------------

@mixin multi-dir() {
  @content;

  // $root: #{&};
  // @at-root [dir] {
  //   #{$root} {
  //     @content;
  //   }
  // }
}

@mixin rtl() {
  $root: #{&};

  @at-root #{add-root-selector($root, "[dir=rtl]")} {
    @content;
  }
}

@mixin ltr() {
  @content;
}

// Add border radius for all directions
// @param {string} $top-start
// @param {string} $top-end
// @param {string} $bottom-end
// @param {string} $bottom-start
// ----------------------------------------------------------
@mixin border-radius($top-start, $top-end: $top-start, $bottom-end: $top-start, $bottom-start: $top-end) {
  @if $top-start == $top-end and $top-start == $bottom-end and $top-start == $bottom-start {
    @include multi-dir() {
      border-radius: $top-start;
    }
  } @else {
    @include ltr() {
      border-top-left-radius: $top-start;
      border-top-right-radius: $top-end;
      border-bottom-right-radius: $bottom-end;
      border-bottom-left-radius: $bottom-start;
    }

    @include rtl() {
      border-top-left-radius: $top-end;
      border-top-right-radius: $top-start;
      border-bottom-right-radius: $bottom-start;
      border-bottom-left-radius: $bottom-end;
    }
  }
}
